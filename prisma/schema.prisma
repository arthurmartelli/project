// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma"
    output   = "../src/server/zod" // (default) the directory where generated zod schemas will be saved

    relationModel = true // (default) Create and export both plain and related models.
    // relationModel         = "default" // Do not export model without relations.
    // relationModel         = false // Do not generate related model

    modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
    // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

    modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

    // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
    useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

    // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
    prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
    // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum DiscountsType {
    FIXED_AMOUNTS
    PERCENT
}

model Address {
    id String @id @default(cuid())

    line1   String  @db.VarChar(255)
    line2   String?
    city    String  @db.VarChar(255)
    state   String  @db.VarChar(255)
    country String  @db.VarChar(255)
    zip     String  @db.VarChar(255)

    client   Client @relation(fields: [clientId], references: [id])
    clientId String @unique

    @@index([line1])
    @@index([city])
    @@index([state])
    @@index([country])
    @@index([zip])
}

model Client {
    id String @id @default(cuid())

    name    String
    email   String
    phone   Int
    Address Address?

    receipts Receipt[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
    @@index([phone])
    @@index([email])
}

model Receipt {
    id Int @id @default(autoincrement())

    clientId String
    client   Client @relation(fields: [clientId], references: [id])

    items Items[]

    notes         String        @db.VarChar(255)
    discount      Float
    discount_type DiscountsType
    taxes         Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([notes])
    @@index([discount])
}

enum ItemCategory {
    ELECTRICIAN
    PAINTER
    PLUMBER
    ROOFING
    LANDSCAPING
}

model Items {
    id String @id @default(cuid())

    receipt   Receipt? @relation(fields: [receiptId], references: [id])
    receiptId Int?

    category    ItemCategory
    quantity    Int
    description String       @db.VarChar(255)

    cost         Float
    discount     Float
    discountType DiscountsType
}
